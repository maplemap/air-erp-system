services:
  api:
    build:
      context: api
    image: air-erp-api:1.0
    container_name: air-erp-api
    command: >
      bash -c "
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput &&
        sh ./scripts/create_groups.sh && 
        sh ./scripts/create_supervisor_user.sh &&
        gunicorn app.wsgi:application --bind 0.0.0.0:8000
      "
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - API_SECRET_KEY=${API_SECRET_KEY}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST=${DB_HOST}
      - SUPERVISOR_USERNAME=${SUPERVISOR_USERNAME}
      - SUPERVISOR_PASSWORD=${SUPERVISOR_PASSWORD}
      - SUPERVISOR_EMAIL=${SUPERVISOR_EMAIL}
    depends_on:
      - api_db
    networks:
      - app-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: air-erp-frontend
    command: serve -s build -l 3000
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - app-network
  api_db:
    image: postgres:13
    container_name: air-erp-api-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
  nginx:
    image: nginx:stable-alpine
    container_name: air-erp-api-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
      - api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: